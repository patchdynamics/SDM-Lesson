formula = present ~ bio18_11 + bio16_11
glm.model = glm(formula, data = presence.values)
summary(glm.model)
formula = present ~ bio17_11
glm.model = glm(formula, data = presence.values)
summary(glm.model)
formula = present ~ bio16_11
glm.model = glm(formula, data = presence.values)
summary(glm.model)
formula = present ~ bio15_11
glm.model = glm(formula, data = presence.values)
summary(glm.model)
formula = present ~ bio14_11
glm.model = glm(formula, data = presence.values)
summary(glm.model)
formula = present ~ bio13_11
glm.model = glm(formula, data = presence.values)
summary(glm.model)
glm.model = glm(formula, data = presence.values)
background.points = randomPoints(project.area.raster, 500)
background.values = extract(predictors, background.points)
present.or.background = c(rep(1, nrow(presence.values)), rep(0, nrow(background.values)))
presence.background.values = cbind(present.or.background, rbind(presence.values, background.values)  )
head(presence.background.values)  # take a look
tail(presence.background.values)
glm.model = glm(present ~ bio1_12, data = presence.values)
summary(glm.model)
names(presence.values)
presence.values$bio9_11
glm.model = glm(present ~ bio9_11, data = presence.values)
summary(glm.model)
glm.model = glm(present ~ bio19_11, data = presence.values)
summary(glm.model)
head(presence.values)
?plot
?ggplot
plot(presence.values,aes(x = bio19_11, y =present)
)
ggplot(presence.values,aes(x = bio19_11, y =present))
ggplot(presence.values,aes(x = bio18_11, y =present))
ggplot(presence.values,aes(x = present, y =present))
str(data.frame)
head(data.frame)
glm.model = glm(present ~ bio19_11, data = presence.background.values)
summary(glm.model)
glm.model = glm(present ~ bio19_11, data = presence.background.values)
head(presence.background.values)  # take a look
predictors = bioclim.local                      # rename variables for simplicity
presence.locations = occurences.resampled
presence.values = raster::extract(predictors, presence.locations )  # extract values from rasters for each point
presence.values = as.data.frame(presence.values)   # change to data frame object just because
# now get background values
background.points = randomPoints(project.area.raster, 500)
background.values = extract(predictors, background.points)
present.or.background = c(rep(1, nrow(presence.values)), rep(0, nrow(background.values)))
presence.background.values = cbind(present.or.background, rbind(presence.values, background.values)  )
head(presence.background.values)  # take a look
glm.model = glm(present ~ bio19_11, data = presence.background.values)
head(presence.background.values)  # take a look
tail(presence.background.values)  # take a look
tail(background.values)
plot(bioclim.local$bio1_11)
lines(project.area)
presence.background.values = presence.background.values[!is.na(presence.background.values$bio1_11)]
presence.background.values = presence.background.values[!is.na(presence.background.values$bio1_11),]
presence.background.values = presence.background.values[!is.na(presence.background.values$bio1_11),]
glm.model = glm(present ~ bio19_11, data = presence.background.values)
nrow(presence.background.values$present)
length(presence.background.values$present)
length(presence.background.values$presence.background.values)
length(presence.background.values$bio1_11)
length(presence.background.values$bio19_11)
glm.model = glm(present ~ bio19_11, data = presence.background.values)
presence.background.values
glm.model = glm(present ~ bio19_11, data = presence.background.values)
glm.model = glm(present ~ + bio19_11, data = presence.background.values)
present
bio19_11
formula = present ~ bio19_11
glm.model = glm(formula, data = presence.background.values)
summary(glm.model)
ggplot(presence.values,aes(x = present, y =present))
ggplot(presence.background.values,aes(x = present, y =present))
ggplot(presence.background.values, aes(x = present, y =present))
head(presence.background.values)
ggplot(presence.background.values, aes(x = present.or.background, y =present.or.background))
ggplot(presence.background.values, aes(x = present.or.background, y =bio19_11))
c = data.frame(x = rep(1,3), y=rep(2,3))
ggplot(c, aes(x=x, y=y))
plot(c$x, c$y)
predictors = bioclim.local                      # rename variables for simplicity
presence.locations = occurences.resampled
presence.predictors = raster::extract(predictors, presence.locations )  # extract values from rasters for each point
presence.predictors = as.data.frame(presence.predictors)   # change to data frame object just because
background.points = randomPoints(project.area.raster, 500)
background.predictors = extract(predictors, background.points)
present.or.background = c(rep(1, nrow(presence.predictors)), rep(0, nrow(background.predictors)))
presence.background.predictors = cbind(present.or.background, rbind(presence.predictors, background.predictors)  )
head(presence.background.predictors)  # take a look
plot(presence.background.predictors$bio19_11, presence.background.predictors$present)
plot(presence.background.predictors$bio18_11, presence.background.predictors$present)
plot(presence.background.predictors$bio17_11, presence.background.predictors$present)
plot(presence.background.predictors$bio16_11, presence.background.predictors$present)
plot(presence.background.predictors$bio15_11, presence.background.predictors$present)
plot(presence.background.predictors$bio14_11, presence.background.predictors$present)
plot(presence.background.predictors$bio13_11, presence.background.predictors$present)
plot(presence.background.predictors$bio12_11, presence.background.predictors$present)
plot(presence.background.predictors$bio11_11, presence.background.predictors$present)
plot(presence.background.predictors$bio10_11, presence.background.predictors$present)
plot(presence.background.predictors$bio9_11, presence.background.predictors$present)
plot(presence.background.predictors$bio8_11, presence.background.predictors$present)
plot(presence.background.predictors$bio7_11, presence.background.predictors$present)
plot(presence.background.predictors$bio6_11, presence.background.predictors$present)
plot(presence.background.predictors$bio5_11, presence.background.predictors$present)
formula = present ~ bio5_11
glm.model = glm(formula, data = presence.background.predictors)
summary(glm.model)
plot(presence.background.predictors$bio4_11, presence.background.predictors$present)
formula = present ~ bio4_11
glm.model = glm(formula, data = presence.background.predictors)
summary(glm.model)
formula = present ~ bio4_11 + bio5_11
glm.model = glm(formula, data = presence.background.predictors)
summary(glm.model)
plot(presence.background.predictors$bio3_11, presence.background.predictors$present)
plot(presence.background.predictors$bio2_11, presence.background.predictors$present)
plot(presence.background.predictors$bio1_11, presence.background.predictors$present)
load('../greater_prairie_chicken_all.Rdata')
points(gpcg[kansas_shp,], col='blue')
greater_prairie_chicken
head(
par(mfrow=c(1,1))        # plot the results
plot(glm.prediction)
points(training.locations, pch=10, col='
)
)
''
)
;
;
';'
''
""
head(greater_prairie_chicken)
greater_prairie_chicken$latitude
greater_prairie_chicken$coordinateAccuracy
names(greater_prairie_chicken)
greater_prairie_chicken$lat
greater_prairie_chicken$lon
coorindates(greater_prairie_chicken) = c('lon', 'lat')
coordinates(greater_prairie_chicken) = c('lon', 'lat')
greater_prairie_chicken = greater_prairie_chicken[!is.nan(greater_prairie_chicken$lat) & !is.nan(greater_prairie_chicken$lon) ]
greater_prairie_chicken = greater_prairie_chicken[!is.nan(greater_prairie_chicken$lat) & !is.nan(greater_prairie_chicken$lon), ]
coordinates(greater_prairie_chicken) = c('lon', 'lat')
greater_prairie_chicken = greater_prairie_chicken[!is.nan(greater_prairie_chicken$lat) & !is.nan(greater_prairie_chicken$lon), ]
coordinates(greater_prairie_chicken) = c('lon', 'lat')
greater_prairie_chicken$lat
greater_prairie_chicken = greater_prairie_chicken[!is.na(greater_prairie_chicken$lat) & !is.na(greater_prairie_chicken$lon), ]
coordinates(greater_prairie_chicken) = c('lon', 'lat')
crs(greater_prairie_chicken) = CRS("+init=epsg:4326")
points(greater_prairie_chicken[kansas_shp,], col='blue')
bioclim = stack('bio1.tif', 'bio2.tif', 'bio3.tif', 'bio4.tif', 'bio5.tif', 'bio6.tif', 'bio7.tif',
'bio8.tif', 'bio9.tif', 'bio10.tif', 'bio11.tif', 'bio12.tif', 'KansasGapLCD_Resampled.tif',
'KansasNLCD_Resampled.tif')
setwd('../EnvironmentalData/')
bioclim = stack('bio1.tif', 'bio2.tif', 'bio3.tif', 'bio4.tif', 'bio5.tif', 'bio6.tif', 'bio7.tif',
'bio8.tif', 'bio9.tif', 'bio10.tif', 'bio11.tif', 'bio12.tif', 'KansasGapLCD_Resampled.tif',
'KansasNLCD_Resampled.tif')
predictors = bioclim
project.area = shapefile('ProjectAreaArborimus.shp')
setwd('../Lesson-SDM/')
project.area = shapefile('ProjectAreaArborimus.shp')
bioclim.local = crop(bioclim, project.area)
extent(bioclim)
extent(project.area)
bioclim = stack('GIS/bio_11/bio1_11.tif', 'GIS/bio_11/bio2_11.tif', 'GIS/bio_11/bio3_11.tif',
'GIS/bio_11/bio4_11.tif', 'GIS/bio_11/bio5_11.tif', 'GIS/bio_11/bio6_11.tif',
'GIS/bio_11/bio7_11.tif', 'GIS/bio_11/bio8_11.tif', 'GIS/bio_11/bio9_11.tif',
'GIS/bio_11/bio10_11.tif', 'GIS/bio_11/bio11_11.tif', 'GIS/bio_11/bio12_11.tif',
'GIS/bio_11/bio13_11.tif', 'GIS/bio_11/bio14_11.tif', 'GIS/bio_11/bio15_11.tif',
'GIS/bio_11/bio16_11.tif', 'GIS/bio_11/bio17_11.tif', 'GIS/bio_11/bio18_11.tif',
'GIS/bio_11/bio19_11.tif' )
bioclim.local = crop(bioclim, project.area)
project.area.raster = raster(project.area)       # create a grid within the project area
res(project.area.raster) = res(bioclim.local) * 10  # set the grid resolution to bioclim resolution, a multiple thereof
occurences.resampled = gridSample(occurences, project.area.raster , n=1)  # do the resampling
occurences.resampled = as.data.frame(occurences.resampled)   # convert results to a data.frame for ease of use
occurences.resampled$Presence = 1
nrow(occurences)
nrow(occurences.resampled)
coordinates(occurences.resampled) = c('longitude', 'latitude')
crs(occurences.resampled) = crs(occurences)
plot(occurences)
lines(project.area, col='blue')
points(occurences.resampled, pch=1, col='red')
plot(project.area, col='blue', typ='l')
points(occurences)
points(occurences.resampled, pch=1, col='red')
points(occurences, pch=11)
plot(project.area, col='blue', typ='l')
points(occurences, pch=11)
points(occurences.resampled, pch=1, col='red')
points(occurences, pch=15)
plot(project.area, col='blue', typ='l')
points(occurences, pch=15)
points(occurences.resampled, pch=1, col='red')
res(project.area.raster) = res(bioclim.local) * 50  # set the grid resolution to bioclim resolution, a multiple thereof
occurences.resampled = gridSample(occurences, project.area.raster , n=1)  # do the resampling
occurences.resampled = as.data.frame(occurences.resampled)   # convert results to a data.frame for ease of use
occurences.resampled$Presence = 1
nrow(occurences)
nrow(occurences.resampled)
# make the resampled output a spatial object
coordinates(occurences.resampled) = c('longitude', 'latitude')
crs(occurences.resampled) = crs(occurences)
# let's compare results
plot(project.area, col='blue', typ='l')
points(occurences, pch=15)
points(occurences.resampled, pch=1, col='red')
res(project.area.raster) = res(bioclim.local) * 10  # set the grid resolution to bioclim resolution, a multiple thereof
occurences.resampled = gridSample(occurences, project.area.raster , n=1)  # do the resampling
occurences.resampled = as.data.frame(occurences.resampled)   # convert results to a data.frame for ease of use
occurences.resampled$Presence = 1
nrow(occurences)
nrow(occurences.resampled)
# make the resampled output a spatial object
coordinates(occurences.resampled) = c('longitude', 'latitude')
crs(occurences.resampled) = crs(occurences)
# let's compare results
plot(project.area, col='blue', typ='l')
points(occurences, pch=15)
points(occurences.resampled, pch=1, col='red')
plot(occurences, pch=15)
lines(project.area, col='blue', typ='l')
points(occurences.resampled, pch=1, col='red')
plot(occurences)
lines(project.area, col='blue', typ='l')
points(occurences.resampled, pch=1, col='red')
predictors = bioclim.local                      # rename variables for simplicity
presence.locations = occurences.resampled
training.locations = presence.locations[sample(nrow(presence.locations), 50),]
plot(presence.locations)
points(training.locations, pch=1, col='red')
training.locations = presence.locations[sample(nrow(presence.locations), 50),]
# take a look..
plot(presence.locations)
points(training.locations, pch=1, col='red')
presence.predictors = raster::extract(predictors, presence.locations )  # extract values from rasters for each point
presence.predictors = as.data.frame(presence.predictors)   # change to data frame object just because
present = rep(1, nrow(presence.predictors ))   # a column of ones identifies these as the values for presence
presence.predictors = cbind(present, presence.predictors)  # assemble the complete matrix
head(presece.predictors)  # take look for understanding
head(presence.predictors)  # take look for understanding
predictors = bioclim.local                      # rename variables for simplicity
presence.locations = occurences.resampled
presence.predictors = raster::extract(predictors, presence.locations )  # extract values from rasters for each point
presence.predictors = as.data.frame(presence.predictors)   # change to data frame object just because
background.points = randomPoints(project.area.raster, 500)
background.predictors = extract(predictors, background.points)
present.or.background = c(rep(1, nrow(presence.predictors)), rep(0, nrow(background.predictors)))
presence.background.predictors = cbind(present.or.background, rbind(presence.predictors, background.predictors)  )
head(presence.background.predictors)  # take a look
presence.background.predictors = presence.background.predictors[!is.na(presence.background.predictors$bio1_11),]
plot(presence.background.predictors$bio1_11, presence.background.predictors$present)
plot(presence.background.predictors$bio1_19, presence.background.predictors$present)
plot(presence.background.predictors$bio2_11, presence.background.predictors$present)
plot(presence.background.predictors$bio1_11, presence.background.predictors$present)
plot(presence.background.predictors$bio2_11, presence.background.predictors$present)
plot(presence.background.predictors$bio3_11, presence.background.predictors$present)
plot(presence.background.predictors$bio4_11, presence.background.predictors$present)
plot(presence.background.predictors$bio5_11, presence.background.predictors$present)
plot(presence.background.predictors$bio6_11, presence.background.predictors$present)
formula = present ~ bio4_11
glm.model = glm(formula, data = presence.background.predictors)
summary(glm.model)
presence.background.predictors[ presence.background.predictors$present == 0 & presence.background.predictors$bio4_11 > -50] = -50
presence.background.predictors[ presence.background.predictors$present == 0 & presence.background.predictors$bio4_11 > -50]$bio4_11 = -50
presence.background.predictors[ presence.background.predictors$present == 0 & presence.background.predictors$bio4_11 > -50,4] = -50
presence.background.predictors[ presence.background.predictors$present == 0 & presence.background.predictors$bio4_11 > -50,4]
names(presence.background.predictors)
class(presence.background.predictors)
plot(presence.background.predictors$bio4_11, presence.background.predictors$present)
plot(presence.background.predictors$bio5_11, presence.background.predictors$present)
plot(presence.background.predictors$bio6_11, presence.background.predictors$present)
presence.background.predictors[ presence.background.predictors$present == 0 & presence.background.predictors$bio6_11 > -50,6]
presence.background.predictors[ presence.background.predictors$present == 0 & presence.background.predictors$bio6_11 < -50,6]
presence.background.predictors[ presence.background.predictors$present == 0 & presence.background.predictors$bio6_11 < -50,1]
presence.background.predictors[ presence.background.predictors$present == 0 & presence.background.predictors$bio6_11 < -50,2]
presence.background.predictors[ presence.background.predictors$present == 0 & presence.background.predictors$bio6_11 < -50,3]
presence.background.predictors[ presence.background.predictors$present == 0 & presence.background.predictors$bio6_11 < -50,4]
presence.background.predictors[ presence.background.predictors$present == 0 & presence.background.predictors$bio6_11 < -50,5]
presence.background.predictors[ presence.background.predictors$present == 0 & presence.background.predictors$bio6_11 < -50,6]
presence.background.predictors[ presence.background.predictors$present == 0 & presence.background.predictors$bio6_11 < -50,7]
presence.background.predictors[ presence.background.predictors$present == 0 & presence.background.predictors$bio6_11 > -50,7] = -50
plot(presence.background.predictors$bio6_11, presence.background.predictors$present)
formula = present ~ bio6_11
glm.model = glm(formula, data = presence.background.predictors)
summary(glm.model)
glm.model = glm(present ~ bio6_11, data = presence.background.predictors)
summary(glm.model)
head(presence.background.predictors)
formula = present.or.background ~ bio6_11
glm.model = glm(formula, data = presence.background.predictors)
summary(glm.model)
predictors = bioclim.local                      # rename variables for simplicity
presence.locations = occurences.resampled
presence.predictors = raster::extract(predictors, presence.locations )  # extract values from rasters for each point
presence.predictors = as.data.frame(presence.predictors)   # change to data frame object just because
# now get background values
background.points = randomPoints(project.area.raster, 500)
background.predictors = extract(predictors, background.points)
present.or.background = c(rep(1, nrow(presence.predictors)), rep(0, nrow(background.predictors)))
presence.background.predictors = cbind(present.or.background, rbind(presence.predictors, background.predictors)  )
head(presence.background.predictors)  # take a look
presence.background.predictors = presence.background.predictors[!is.na(presence.background.predictors$bio1_11),]
plot(presence.background.predictors$bio6_11, presence.background.predictors$present)
formula = present.or.background ~ bio6_11
glm.model = glm(formula, data = presence.background.predictors)
summary(glm.model)
glm.prediction = predict(predictors, glm.model)
par(mfrow=c(1,1))        # plot the results
plot(glm.prediction)
points(training.locations, pch=10, col='blue')
points(occurences)
plot(presence.background.predictors$bio4_11, presence.background.predictors$present)
plot(presence.background.predictors$bio5_11, presence.background.predictors$present)
plot(presence.background.predictors$bio4_11, presence.background.predictors$present)
formula = present.or.background ~ bio6_11 + bio4_11
glm.model = glm(formula, data = presence.background.predictors)
summary(glm.model)
glm.prediction = predict(predictors, glm.model)
formula = present.or.background ~ bio6_11
glm.model = glm(formula, data = presence.background.predictors)
summary(glm.model)
glm.prediction = predict(predictors, glm.model)
formula = present.or.background ~ bio6_11 + bio4_11
glm.model = glm(formula, data = presence.background.predictors)
summary(glm.model)
glm.prediction = predict(predictors, glm.model)
glm.prediction = predict(predictors, glm.model)
par(mfrow=c(1,1))        # plot the results
plot(glm.prediction)
points(training.locations, pch=10, col='blue')
points(occurences)
plot(presence.background.predictors$bio1_11, presence.background.predictors$present)
plot(presence.background.predictors$bio2_11, presence.background.predictors$present)
plot(presence.background.predictors$bio3_11, presence.background.predictors$present)
formula = present.or.background ~ .
glm.model = glm(formula, data = presence.background.predictors)
summary(glm.model)  # we want to have the lowest AIC
glm.prediction = predict(predictors, glm.model)
par(mfrow=c(1,1))        # plot the results
plot(glm.prediction)
points(training.locations, pch=10, col='blue')
points(occurences)
writeRaster(glm.prediction, 'GIS/predictions/glm.prediction.tif', overwrite=TRUE)
bioclim.model = bioclim(predictors, presence.locations)
bioclim.model = bioclim(predictors, training.locations)
bioclim.prediction = predict(predictors, bioclim.model)
par(mfrow=c(1,1))
plot(bioclim.prediction)
points(training.locations, pch=10, col='blue')
points(occurences)
bbox(bioclim.local)
elevation = raster('GIS/DEMSRE0a.tif')
elevation = projectRaster(elevation, project.area.raster) # clip and project to our project area
predictors = stack(bioclim.local, elevation)
elevation = projectRaster(elevation, bioclim.local) # clip and project to our project area
predictors = stack(bioclim.local, elevation)
plot(elevation)
plot(presence.background.predictors$elevation, presence.background.predictors$present)
head(presence.background.predictors)
names(predictors)
predictors = stack(bioclim.local, elevation)
presence.predictors = raster::extract(predictors, presence.locations )  # extract values from rasters for each point
names(presence.predictors)
head(presence.predictors)
names(predictors)[20]
names(predictors)[20] = "elevation"
names(predictors)[20]
presence.predictors = raster::extract(predictors, presence.locations )  # extract values from rasters for each point
presence.predictors = as.data.frame(presence.predictors)   # change to data frame object just because
head(presence.predictors)
background.points = randomPoints(project.area.raster, 500)
background.predictors = extract(predictors, background.points)
present.or.background = c(rep(1, nrow(presence.predictors)), rep(0, nrow(background.predictors)))
presence.background.predictors = cbind(present.or.background, rbind(presence.predictors, background.predictors)  )
presence.background.predictors = presence.background.predictors[!is.na(presence.background.predictors$bio1_11),]
head(presence.background.predictors)
plot(presence.background.predictors$elevation, presence.background.predictors$present)
glm.model = glm(formula = present.or.background ~ elevation, data = presence.background.predictors)
glm.prediction = predict(predictors, glm.model)
plot(glm.prediction)
points(training.locations, pch=10, col='blue')
points(occurences)
summary(glm.model)
glm.model = glm(formula = present.or.background ~ ., data = presence.background.predictors)
glm.prediction = predict(predictors, glm.model)
plot(glm.prediction)
points(training.locations, pch=10, col='blue')
points(occurences)
glm.model = glm(formula = present.or.background ~ bio6_11 + bio4_11 + elevation # extend our model
, data = presence.background.predictors)
glm.prediction = predict(predictors, glm.model)
plot(glm.prediction)
points(training.locations, pch=10, col='blue')
points(occurences)
writeRaster(glm.prediction, 'GIS/predictions/glm.prediction.elevation.tif', overwrite=TRUE)
elevation = raster('GIS/DEMSRE2a.tif')
elevation = projectRaster(elevation, bioclim.local) # clip and project to our project area
predictors = stack(bioclim.local, elevation)
names(predictors)[20] = "elevation"
presence.predictors = raster::extract(predictors, presence.locations )  # extract values from rasters for each point
presence.predictors = as.data.frame(presence.predictors)   # change to data frame object just because
background.points = randomPoints(project.area.raster, 500)
background.predictors = extract(predictors, background.points)
present.or.background = c(rep(1, nrow(presence.predictors)), rep(0, nrow(background.predictors)))
presence.background.predictors = cbind(present.or.background, rbind(presence.predictors, background.predictors)  )
presence.background.predictors = presence.background.predictors[!is.na(presence.background.predictors$bio1_11),]
plot(presence.background.predictors$elevation, presence.background.predictors$present)
glm.model = glm(formula = present.or.background ~ bio6_11 + bio4_11 + elevation # extend our model
, data = presence.background.predictors)
glm.prediction = predict(predictors, glm.model)
plot(glm.prediction)
points(training.locations, pch=10, col='blue')
points(occurences)
writeRaster(glm.prediction, 'GIS/predictions/glm.prediction.elevation.2.tif', overwrite=TRUE)
writeRaster(elevation, file='GIS/DEMSRE2a.tif')
writeRaster(elevation, file='GIS/DEMSRE2a.tif', overwrite=TRUE)
elevation = raster('GIS/DEMSRE2a_Slope.tif')
elevation = projectRaster(elevation, bioclim.local) # clip and project to our project area
predictors = stack(bioclim.local, elevation)
names(predictors)[20] = "elevation"
# then do the same stuff we did before
presence.predictors = raster::extract(predictors, presence.locations )  # extract values from rasters for each point
presence.predictors = as.data.frame(presence.predictors)   # change to data frame object just because
background.points = randomPoints(project.area.raster, 500)
background.predictors = extract(predictors, background.points)
present.or.background = c(rep(1, nrow(presence.predictors)), rep(0, nrow(background.predictors)))
presence.background.predictors = cbind(present.or.background, rbind(presence.predictors, background.predictors)  )
presence.background.predictors = presence.background.predictors[!is.na(presence.background.predictors$bio1_11),]
plot(presence.background.predictors$elevation, presence.background.predictors$present)
elevation = raster('GIS/DEMSRE2a_Aspect.tif')
elevation = projectRaster(elevation, bioclim.local) # clip and project to our project area
predictors = stack(bioclim.local, elevation)
names(predictors)[20] = "elevation"
# then do the same stuff we did before
presence.predictors = raster::extract(predictors, presence.locations )  # extract values from rasters for each point
presence.predictors = as.data.frame(presence.predictors)   # change to data frame object just because
background.points = randomPoints(project.area.raster, 500)
background.predictors = extract(predictors, background.points)
present.or.background = c(rep(1, nrow(presence.predictors)), rep(0, nrow(background.predictors)))
presence.background.predictors = cbind(present.or.background, rbind(presence.predictors, background.predictors)  )
presence.background.predictors = presence.background.predictors[!is.na(presence.background.predictors$bio1_11),]
plot(presence.background.predictors$elevation, presence.background.predictors$present)
elevation = raster('GIS/DEMSRE2a_TPI.tif')
elevation = projectRaster(elevation, bioclim.local) # clip and project to our project area
predictors = stack(bioclim.local, elevation)
names(predictors)[20] = "elevation"
# then do the same stuff we did before
presence.predictors = raster::extract(predictors, presence.locations )  # extract values from rasters for each point
presence.predictors = as.data.frame(presence.predictors)   # change to data frame object just because
background.points = randomPoints(project.area.raster, 500)
background.predictors = extract(predictors, background.points)
present.or.background = c(rep(1, nrow(presence.predictors)), rep(0, nrow(background.predictors)))
presence.background.predictors = cbind(present.or.background, rbind(presence.predictors, background.predictors)  )
presence.background.predictors = presence.background.predictors[!is.na(presence.background.predictors$bio1_11),]
plot(presence.background.predictors$elevation, presence.background.predictors$present)
libary(rJava)
library(rJava)
predictors = bioclim.local
maxent.model = maxent(predictors, presence.locations)
maxent.prediction = predict(predictors, maxent.model)
plot(maxent.prediction)
points(training.locations, pch=10, col='blue')
points(occurences)
writeRaster(glm.prediction, 'GIS/predictions/glm.prediction.maxent.tif', overwrite=TRUE)
writeRaster(bioclim.prediction, 'GIS/predictions/bioclim.prediction.tiff')
writeRaster(bioclim.prediction, 'GIS/predictions/bioclim.prediction.tiff', overwrite=TRUE)
writeRaster(maxent.prediction, 'GIS/predictions/glm.prediction.maxent.tif', overwrite=TRUE)
writeRaster(maxent.prediction, 'GIS/predictions/maxent.prediction.tif', overwrite=TRUE)
?glm
glm.model = glm(formula, data = presence.background.predictors, family=binomial)
summary(glm.model)  # we want to have the lowest AIC
formula = present.or.background ~ bio6_11 + bio4_11  # be selective
glm.model = glm(formula, data = presence.background.predictors, family=binomial)
summary(glm.model)  # we want to have the lowest AIC
glm.prediction = predict(predictors, glm.model)
# plot the results
par(mfrow=c(1,1))    # this just makes sure we only have 1 plot on the screen
plot(glm.prediction)
points(training.locations, pch=10, col='blue')
points(occurences)
glm.model = glm(formula, data = presence.background.predictors, family=gaussian)
summary(glm.model)  # we want to have the lowest AIC
# compute the predicted distribution
glm.prediction = predict(predictors, glm.model)
# plot the results
par(mfrow=c(1,1))    # this just makes sure we only have 1 plot on the screen
plot(glm.prediction)
points(training.locations, pch=10, col='blue')
points(occurences)
glm.model = glm(formula, data = presence.background.predictors, family=poisson)
summary(glm.model)  # we want to have the lowest AIC
# compute the predicted distribution
glm.prediction = predict(predictors, glm.model)
# plot the results
par(mfrow=c(1,1))    # this just makes sure we only have 1 plot on the screen
plot(glm.prediction)
points(training.locations, pch=10, col='blue')
points(occurences)
glm.model = glm(formula, data = presence.background.predictors, family=binomial(link = logit))  #
