{
    "contents" : "# first create a new project to work in.\n\n# install some libraries\ndevtools::install_github(\"ropensci/spocc\")\ndevtools::install_github(\"ropensci/spoccutils\")\ninstall.packages(\"ggplot2\")\ninstall.packages(\"rJava\")\ninstall.packages(\"dismo\")\ninstall.packages(\"raster\")\n\n\n# load some libraries\nlibrary(spocc)\nlibrary(spoccutils)\nlibrary(ggplot2)\nlibrary(raster)\nlibrary(rgeos)\nlibrary(dismo)\n\n# Red Tree Vole (Oregon) - Arborimus longicaudus\n\n# get species data\nspecies.occurence <- occ(query = \"Arborimus longicaudus\", \n                         from = c(\"gbif\", \"bison\", \"ecoengine\", \"inat\"),\n                         has_coords = TRUE,\n                         limit = 1500)\nnrow(species.occurence$gbif$data[[1]])\nnrow(species.occurence$bison$data[[1]])\nnrow(species.occurence$ecoengine$data[[1]])\nnrow(species.occurence$inat$data[[1]])\n\n\n#  You could also use MOL in the same way\n#  TS.points.range  = MOLget(\"Tympanuchus pallidicinctus\", type=c(\"points\"))\n\n# inspect locations of data\nmap_ggplot(species.occurence)\nmap_leaflet(species.occurence)\n\n# inspect the data object returned\nnames(species.occurence)\nnames(species.occurence$gbif)\nnames(species.occurence$gbif$data)\nnames(species.occurence$gbif$data[[1]])\n\nnrow(species.occurence$gbif$data[[1]]) # show me how many records I got\n\n# look around at some of the information in this data (if it exists)\nhead(species.occurence$gbif$data[[1]]$occurrenceRemarks)\nhead(species.occurence$gbif$data[[1]]$type, 20)\nhead(species.occurence$gbif$data[[1]]$collectionCode, 20)\n\n# save data locally so you don't have to query the internet every time\nsave(species.occurence, file='species.occurence.Rdata')\n\n# load from the file instead of from the web\nload('species.occurence.Rdata')\n\n# optionally export to spreadsheet for visualize cleaning / analysis\nwrite.csv(species.occurence$bison$data[[1]], file='my_occurences.gbif.csv')\nwrite.csv(species.occurence$bison$data[[1]], file='my_occurences.bison.csv')\n\n# Save occurence data to a shapefile so we can explore it in QGIS\n# We are just going to use results from BISON database for now\noccurences.bison = species.occurence$bison$data[[1]]\noccurences = occurences.bison[!is.na(occurences.bison$latitude) & !(occurences.bison$latitude == 0),]  # here we filter out records with missing coordinates\ncoordinates(occurences) = c('longitude', 'latitude')\ncrs(occurences) = CRS(\"+init=epsg:4326\")  # 4326 is WGS84, the standard lat/lon coordinate system\nshapefile(occurences, 'occurences', overwrite=TRUE)\n\n# In QGIS create the project area\n\nproject.area = shapefile('ProjectAreaArborimus.shp')\n\n\n# You could also load only occurence points matching your project area\nwkt = writeWKT(project.area)   # this converts the shape into the Well Known Text format\nspecies.occurence = occ(query = \"Arborimus longicaudus\", \n                        geometry=wkt,\n                        from = c(\"gbif\", \"bison\", \"ecoengine\", \"inat\"),\n                        has_coords = TRUE,\n                        limit = 1500)\noccurences.bison = species.occurence$bison$data[[1]]\noccurences = occurences.bison[!is.na(occurences.bison$latitude) & !(occurences.bison$latitude == 0),]  # here we filter out records with missing coordinates\ncoordinates(occurences) = c('longitude', 'latitude')\ncrs(occurences) = CRS(\"+init=epsg:4326\")  # 4326 is WGS84, the standard lat/lon coordinate system\nshapefile(occurences, 'occurences_project')\n\n\n# Loading BioClim data\n# this can happen a few ways\n# 1) Load directly into R using the methods Giuseppe demo'd.  To do this you should know coordinates\n# within each time that you need\n#\n# bioclim = getData('worldclim' , var='bio' , res=0.5, lon=-40, lat=-15 ) \n#\n# 2) Download the entire BioClim data set manually http://www.worldclim.org/tiles.php\n# and then clip to your region\n# We'll use this method for clarity.\n\n\n\n\n# Now we load all the bioclim data into a RasterStack\nbioclim = stack('GIS/bio_11/bio1_11.tif', 'GIS/bio_11/bio2_11.tif', 'GIS/bio_11/bio3_11.tif',\n                'GIS/bio_11/bio4_11.tif', 'GIS/bio_11/bio5_11.tif', 'GIS/bio_11/bio6_11.tif',\n                'GIS/bio_11/bio7_11.tif', 'GIS/bio_11/bio8_11.tif', 'GIS/bio_11/bio9_11.tif',\n                'GIS/bio_11/bio10_11.tif', 'GIS/bio_11/bio11_11.tif', 'GIS/bio_11/bio12_11.tif',\n                'GIS/bio_11/bio13_11.tif', 'GIS/bio_11/bio14_11.tif', 'GIS/bio_11/bio15_11.tif',\n                'GIS/bio_11/bio16_11.tif', 'GIS/bio_11/bio17_11.tif', 'GIS/bio_11/bio18_11.tif',\n                'GIS/bio_11/bio19_11.tif' )\nnames(bioclim)  # see what to call the layers\n\n# plot one layer\npar(mfrow=c(1,1))\nplot(bioclim$bio1_11) \n\n# plot all (first 16) layers\nplot(bioclim)\n\n# crop bioclim to study area\nbioclim.local = crop(bioclim, project.area)\nplot(bioclim.local)\n\n# save the raster stack as a brick\nwriteRaster(bioclim.local, 'GIS/bioclim.Arborimus.local.tiff', overwrite=TRUE)\n# or write out as individual files\nwriteRaster(bioclim.local, 'GIS/bioclim.Arborimus.local.tiff', bylayer=TRUE, overwrite=TRUE)\n\n\n\n\n# first we must resample our occurence data to deal with sampling bias\nproject.area.raster = raster(project.area)       # create a grid within the project area\nres(project.area.raster) = res(bioclim.local) * 10  # set the grid resolution to bioclim resolution, a multiple thereof\noccurences.resampled = gridSample(occurences, project.area.raster , n=1)  # do the resampling\noccurences.resampled = as.data.frame(occurences.resampled)   # convert results to a data.frame for ease of use\noccurences.resampled$Presence = 1\n\nnrow(occurences)\nnrow(occurences.resampled)\n\n# make the resampled output a spatial object\ncoordinates(occurences.resampled) = c('longitude', 'latitude')   # assigns coordinates\ncrs(occurences.resampled) = crs(occurences)                      # assigns map projection\n\n# let's compare results\nplot(occurences)\nlines(project.area, col='blue', typ='l')\npoints(occurences.resampled, pch=1, col='red')\n\n\n# let's save this as a shapefile so we can have a closer look\nshapefile(occurences.resampled, 'occurences_resampled', overwrite=TRUE)\n\n\n#\n#\n# Finally time to do some spatial regression / prediction!\n#\n#\n\n# rename variables for simplicity\npredictors = bioclim.local                      \npresence.locations = occurences.resampled\n\n# first let's create a training subset\ntraining.locations = presence.locations[sample(nrow(presence.locations), 50),]\n\n# take a look..\nplot(presence.locations)\npoints(training.locations, pch=1, col='red')\n\n# prepare the data for predictions\npresence.predictors = raster::extract(predictors, presence.locations )  # extract values from rasters for each point\npresence.predictors = as.data.frame(presence.predictors)   # change to data frame object just because             \n\npresent = rep(1, nrow(presence.predictors ))   # a column of ones identifies these as the values for presence\npresence.predictors = cbind(present, presence.predictors)  # assemble the complete matrix\nhead(presence.predictors)  # take look for understanding\n\n\n# with presence and background (pseudo-absence) values\n# first the presense values as before\npredictors = bioclim.local                      # rename variables for simplicity\npresence.locations = occurences.resampled \n\npresence.predictors = raster::extract(predictors, presence.locations )  # extract values from rasters for each point\npresence.predictors = as.data.frame(presence.predictors)   # change to data frame object just because             \n\n# now get background values\nbackground.points = randomPoints(project.area.raster, 500)\nbackground.predictors = extract(predictors, background.points)\npresent.or.background = c(rep(1, nrow(presence.predictors)), rep(0, nrow(background.predictors)))\npresence.background.predictors = cbind(present.or.background, rbind(presence.predictors, background.predictors)  )\nhead(presence.background.predictors)  # take a look \n\n# because we are on the coast, some of our random points could have fallen in the water\npresence.background.predictors = presence.background.predictors[!is.na(presence.background.predictors$bio1_11),]\n\n# now we can think about this as a logistic regression\n# one might check graphs for logistic response, for instance\nplot(presence.background.predictors$bio1_11, presence.background.predictors$present)\nplot(presence.background.predictors$bio2_11, presence.background.predictors$present)\nplot(presence.background.predictors$bio3_11, presence.background.predictors$present)\nplot(presence.background.predictors$bio4_11, presence.background.predictors$present)\nplot(presence.background.predictors$bio5_11, presence.background.predictors$present)\nplot(presence.background.predictors$bio6_11, presence.background.predictors$present)\n\n\n# and see if we can get a good prediction, by setting up a formula that makes sense\nformula = present.or.background ~ bio6_11 + bio4_11  # be selective\n#formula = present.or.background ~ .   # or just rhow in the kitchen sink (but might suffer from correlated predictors)\n\n# compute the model and check the AIC\nglm.model = glm(formula, data = presence.background.predictors, family=binomial(link = logit))  # family=binomial(link = logit) makes this a logistic regression\nsummary(glm.model)  # we want to have the lowest AIC\n\n# compute the predicted distribution\nglm.prediction = predict(predictors, glm.model)\n\n# plot the results\npar(mfrow=c(1,1))    # this just makes sure we only have 1 plot on the screen       \nplot(glm.prediction)\npoints(training.locations, pch=10, col='blue')\npoints(occurences)\n\n\n# write the prediction out to a file to view in QGIS\n# note that 'zoom' doesn't always layout correctly, QGIS better for visual analysis!\nwriteRaster(glm.prediction, 'GIS/predictions/glm.prediction.tif', overwrite=TRUE)\n\n\n\n\n# instead of do a direct linear regression, we can use more advanced models\n# fit the 'bioclim' (climate-envolope) model, which only uses presence locations and predictors\nbioclim.model = bioclim(predictors, training.locations)\nbioclim.prediction = predict(predictors, bioclim.model)\n\npar(mfrow=c(1,1))      \nplot(bioclim.prediction)\npoints(training.locations, pch=10, col='blue')\npoints(occurences)\n\n\n# we can also write this prediction out to a file to view in QGIS if we want to\nwriteRaster(bioclim.prediction, 'GIS/predictions/bioclim.prediction.tiff', overwrite=TRUE)\n\n\n#\n# these predictors didn't work very well\n# let's get some other data\nbbox(bioclim.local)  # use this to download other data from earthexplorer, worldgrids, etc.\n\n#\n# bring in an elevation layer\n#\nelevation = raster('GIS/DEMSRE2a.tif')\nelevation = projectRaster(elevation, bioclim.local) # clip and project to our project area\npredictors = stack(bioclim.local, elevation)\nnames(predictors)[20] = \"elevation\"\n\n# then do the same stuff we did before\npresence.predictors = raster::extract(predictors, presence.locations )  # extract values from rasters for each point\npresence.predictors = as.data.frame(presence.predictors)   # change to data frame object just because             \nbackground.points = randomPoints(project.area.raster, 500)\nbackground.predictors = extract(predictors, background.points)\npresent.or.background = c(rep(1, nrow(presence.predictors)), rep(0, nrow(background.predictors)))\npresence.background.predictors = cbind(present.or.background, rbind(presence.predictors, background.predictors)  )\npresence.background.predictors = presence.background.predictors[!is.na(presence.background.predictors$bio1_11),]\n\nplot(presence.background.predictors$elevation, presence.background.predictors$present)\n\nglm.model = glm(formula = present.or.background ~ bio6_11 + bio4_11 + elevation # extend our model \n                , data = presence.background.predictors)\nglm.prediction = predict(predictors, glm.model)\n\nplot(glm.prediction)\npoints(training.locations, pch=10, col='blue')\npoints(occurences)\n\nwriteRaster(glm.prediction, 'GIS/predictions/glm.prediction.elevation.2.tif', overwrite=TRUE)\n\n\n\n#\n# Hmm, was elevation really a good idea ?\n# maybe bringing in NLCD is going to help us\n#\nNLCD.local = raster('GIS/NLCD.local.tif')\nNLCD.local = projectRaster(NLCD.local, predictors)\nstack(predictors, NLCD.local)  # etc...\n\n\n\n\n# fit a maxent model\n# this requires a special file\n# download from http://www.cs.princeton.edu/~schapire/maxent/\n# on MacOS X then, using terminal:\n# cp maxent/maxent.jar /Library/Frameworks/R.framework/Versions/3.2/Resources/library/dismo/java/maxent.jar\nlibrary(rJava)\npredictors = bioclim.local\nmaxent.model = maxent(predictors, training.locations)\n\nmaxent.prediction = predict(predictors, maxent.model)\n\nplot(maxent.prediction)\npoints(training.locations, pch=10, col='blue')\npoints(occurences)\n\nwriteRaster(maxent.prediction, 'GIS/predictions/maxent.prediction.tif', overwrite=TRUE)\n\n\n\n\n\n",
    "created" : 1455059537794.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3454059290",
    "id" : "6E1C297B",
    "lastKnownWriteTime" : 1455061001,
    "path" : "~/Documents/Projects/Spatial Stats/Lesson-SDM/SDM-Detail.R",
    "project_path" : "SDM-Detail.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}