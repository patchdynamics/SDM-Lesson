{
    "contents" : "# load some libraries\nlibrary(spocc)\nlibrary(spoccutils)\nlibrary(ggplot2)\nlibrary(raster)\nlibrary(rgeos)\nlibrary(dismo)\n\n# get species data\nspecies.occurence <- occ(query = \"Tympanuchus pallidicinctus\", \n                         from = c(\"gbif\", \"bison\", \"ecoengine\"),\n                         has_coords = TRUE,\n                         limit = 1500)\n\n# look at species data\nmap_ggplot(species.occurence)\n\n# create raster stack\nbioclim = stack('GIS/bio_11/bio1_11.tif', 'GIS/bio_11/bio2_11.tif', 'GIS/bio_11/bio3_11.tif',\n                'GIS/bio_11/bio4_11.tif', 'GIS/bio_11/bio5_11.tif', 'GIS/bio_11/bio6_11.tif',\n                'GIS/bio_11/bio7_11.tif', 'GIS/bio_11/bio8_11.tif', 'GIS/bio_11/bio9_11.tif',\n                'GIS/bio_11/bio10_11.tif', 'GIS/bio_11/bio11_11.tif', 'GIS/bio_11/bio12_11.tif',\n                'GIS/bio_11/bio13_11.tif', 'GIS/bio_11/bio14_11.tif', 'GIS/bio_11/bio15_11.tif',\n                'GIS/bio_11/bio16_11.tif', 'GIS/bio_11/bio17_11.tif', 'GIS/bio_11/bio18_11.tif',\n                'GIS/bio_11/bio19_11.tif' )\n\n# resample our occurence data to deal with sampling bias\nproject.area.raster = raster(project.area)       # create a grid within the project area\nres(project.area.raster) = res(bioclim.local) * 10  # set the grid resolution to bioclim resolution, a multiple thereof\noccurences.resampled = gridSample(occurences, project.area.raster , n=1)  # do the resampling\noccurences.resampled = as.data.frame(occurences.resampled)   # convert results to a data.frame for ease of use\noccurences.resampled$Presence = 1\n\n# make the resampled output a spatial object\ncoordinates(occurences.resampled) = c('longitude', 'latitude')\ncrs(occurences.resampled) = crs(occurences)\n\n# rename variables for simplicity\npredictors = bioclim.local                      \npresence.locations = occurences.resampled\n\n# first let's create a training subset\ntraining.locations = presence.locations[sample(nrow(presence.locations), 50),]\n\n# prepare the data for predictions\npresence.predictors = raster::extract(predictors, presence.locations )  # extract values from rasters for each point\npresence.predictors = as.data.frame(presence.predictors)   # change to data frame object just because             \npresent = rep(1, nrow(presence.predictors ))   # a column of ones identifies these as the values for presence\npresence.predictors = cbind(present, presence.predictors)  # assemble the complete matrix\n\n\n# now get background values\nbackground.points = randomPoints(project.area.raster, 500)\nbackground.predictors = extract(predictors, background.points)\npresent.or.background = c(rep(1, nrow(presence.predictors)), rep(0, nrow(background.predictors)))\npresence.background.predictors = cbind(present.or.background, rbind(presence.predictors, background.predictors)  )\nhead(presence.background.predictors)  # take a look \n\n# because we are on the coast, some of our random points could have fallen in the water\npresence.background.predictors = presence.background.predictors[!is.na(presence.background.predictors$bio1_11),]\n\n# and see if we can get a good prediction, by setting up a formula that makes sense\nformula = present.or.background ~ bio6_11 + bio4_11  # be selective\n\n# compute the model and check the AIC\nglm.model = glm(formula, data = presence.background.predictors, family=binomial(link = logit))  # family=binomial(link = logit) makes this a logistic regression\nsummary(glm.model)  # we want to have the lowest AIC\n\n# compute the predicted distribution\nglm.prediction = predict(predictors, glm.model)\n\n# plot the results\npar(mfrow=c(1,1))    # this just makes sure we only have 1 plot on the screen       \nplot(glm.prediction)\npoints(training.locations, pch=10, col='blue')\npoints(occurences)\n\n",
    "created" : 1455059956365.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "795505047",
    "id" : "F654D612",
    "lastKnownWriteTime" : 1455060194,
    "path" : "~/Documents/Projects/Spatial Stats/Lesson-SDM/SDM-Simple.R",
    "project_path" : "SDM-Simple.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}